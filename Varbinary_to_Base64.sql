use CAMPAIGN_MANAGEMENT
go


select * from CAMPAIGN_MASTER where i_campaign_id = 115011;
select * from CAMPAIGN_CUSTOMER_REV_DETAILS where i_campaign_id = 115011;
select * from CAMPAIGN_CUSTOMER_REV_DETAILS_TRAN where i_campaign_id = 115011;

EXEC [dbo].[Get_Customer_Revenue_For_Campaign_Dashboard] 
@campaign_ids = '<header><row campaign_id="115011" /></header>'

select top 10 * from CREATIVE_IMAGES order by i_image_id desc;


--------------------------------------------------------------------------------------------
--			STEPS TO ENCODE AND DECODE A STRING
-- XML (at least natively in SQL Server) supports the ability to handle binary data 
-- using Base64 encoding/decoding
--------------------------------------------------------------------------------------------

--DECLARE @images_xml	NVARCHAR(MAX) 
--						= '<root>
--								<preview_image_details image_name="arrow.png" image_data="0x89504E470D0A1A0A0000000D494844520000005200000052040300000035029EA800000030504C544547704CFFB700FFB800FFB800FFAF00FFB700FFB800FFB800FFB900FFB900FFB900FFB8000000006045005F4500805C009EEF58510000000B74524E53005683DF10209FBCEFEE70F331E812000001D84944415448C79597BD4E02411485570563AC4CD4A8A1B130D184061B28B659AD2CA1D3D098D818A99492CEC2C64613AC6CAC6CAC70032837CA0BACBC00BC813E0285BB84BFDD39B37BE6949B2F67E6DEBD33F78E6545547AADDAF251B8D9B4E275742913E5E3D8D496CCEB5A0F1E4858F9A206AC4854AD22E518E81D91EB8274A882C782B51705D3B68674A35BDD169D1EC3E0AAE8B51B22B3316428FE4511D2341B4B7666E082C46B6D4A9E26904FD3FF682790AE43C5331F5326916C8C493B911C2F9FBCF864F93241D6476485205BA37A1346C146972932D8E81245D6A96C4E325A8B7EECF601D946010D7F70484AC5753DAF0F2B4F097DE879C8F45C0DFDCF83A60FEABFFCF6A0691324099B36C061C3A61D359D1AD31622A1691B163C3275AD7BE14C5D0BD60332C52432C5E4174D0ED0EA3669F909C901CC528DB3F4335FE12C7DF28DB3F46FFB0C67E9575D1959F65025AF20CB5F95CCC113D783278E3FC529F266281ADC360637D80945E6C88610846E819034011974046AA34DC3CE95D88A838237EDB07CD7E62701EB8C9D2E0C261670EC74A3153F59F1D35AACE94B7858DC61A74A8349959F7E0D266A1CFFAD83C83498FC1DFC48485F508E23455E284ECC6BA634B3BDDB48782195F6ABCFE216AE94D7D13FCCBC89C488DBEB090000000049454E44AE426082" />
--							</root>';

DECLARE @source VARBINARY(MAX), @encoded VARCHAR(MAX), @decoded VARBINARY(MAX);
SET @source = CONVERT(VARBINARY(MAX), 'a');
SET @encoded = CAST('' AS XML).value('xs:base64Binary(sql:variable("@source"))', 'VARCHAR(MAX)');
SET @decoded = CAST('' AS XML).value('xs:base64Binary(sql:variable("@encoded"))', 'VARBINARY(MAX)');

SELECT
CONVERT(VARCHAR(MAX), @source) AS source_varchar,		--a
@source AS source_binary,								--0x61
@encoded AS encoded_base64,								--YQ==
@decoded AS decoded_binary,								
CONVERT(VARCHAR(MAX), @decoded) AS decoded_varchar;

--select convert(varchar(max),0x61);



--------------------------------------------------------------------------------------------
--			TRYING ENCODING/DECODING WITH XML param for Stored Proc
-- We will receive image data in xml so trying this out
--------------------------------------------------------------------------------------------

--DECLARE @images_xml	NVARCHAR(MAX) --XML
--						= '<root>
--								<preview_image_details> 
--									<preview_image_name>arrow.png</preview_image_name> 
--									<preview_image_data>YQ==</preview_image_data>
--								</preview_image_details> 
--							</root>';
-- This works too ^^

DECLARE @images_xml	XML		--NVARCHAR(MAX), works with nvarchar too
						= '<root>
								<preview_image_details preview_image_name="arrow.png" preview_image_data="YQ==" />
							</root>';
DECLARE @hDoc INT;

DROP TABLE IF EXISTS preview_image_details;
CREATE TABLE preview_image_details
(
	image_name		VARCHAR(200),
	image_data		VARBINARY(MAX)
);

EXEC Sp_xml_preparedocument
@hDoc OUTPUT,
@images_xml;

INSERT INTO preview_image_details
(
	image_name,
	image_data
)
SELECT	preview_image_name, 
		CAST('' AS XML).value('xs:base64Binary(sql:column("preview_image_data"))', 'VARBINARY(MAX)') AS preview_image_data
FROM	OPENXML(@hDoc, '/root/preview_image_details', 1)
		WITH ( 
				preview_image_name		VARCHAR(200),
				preview_image_data		VARCHAR(MAX) --VARBINARY(MAX)
		)
;

EXEC Sp_xml_removedocument @hDoc

select image_name, image_data as [image_data] from preview_image_details;
select image_name, CONVERT(VARCHAR(MAX),image_data) as [image_data] from preview_image_details;
select image_name, CONVERT(VARBINARY(MAX),image_data) as [image_data] from preview_image_details;



--------------------------------------------------------------------------------------------
--			Getting image data directly via a varbinary type param
--------------------------------------------------------------------------------------------

--DECLARE @binary_data VARBINARY(MAX) = CONVERT(VARBINARY(MAX),'0x89504E470D0A1A0A0000000D49484452000000440000004408030000000FCD638000000033504C544547704CFFB763000000180B00FFB763FFB762F47601FFB762FFB763FFB663F88C23592B00D66701763900C66001FDAB50934700E109FE7A0000000A74524E5300FFFFFFA75FFFDB80503FF934260000011C4944415458C3EDD8411283200C05504010915ABDFF690BCA6857F9BFC44D67CC01DE04854062CC1EC947FB73441FCC15A94368CEC94CD6AEF3F87BCCF36AED741A3DC4E13425288C5D4905891AA32AB126B28EAA584B2A5E97484DC56B5753A2ACC7DA518BD807F95764CB9B1A599C73598B0C8E5330422822B2394E913FECC229E017730ADA279402371BA3E01D4B28C4B6C70A7376A0421D40A470A7182864299015B69E880A5D942485AF6CF950160DF23EEAC2F0522092C122A24122B2C121C0A0106430083408041B18210C883006422803209C2123A4C1DCC5D020106CE0F70961A00B3D2F84F13C411F8445A216A9EDE82D8D64D2B7B4E19EE6BAA4A26CF3C35D038736FAE89A7D5CA30F6342FF10267DCD7242DF38A8111FD8B36168C76386BC0000000049454E44AE426082',1);
DECLARE @binary_data VARBINARY(MAX) = 0x89504E470D0A1A0A0000000D49484452000000440000004408030000000FCD638000000033504C544547704CFFB763000000180B00FFB763FFB762F47601FFB762FFB763FFB663F88C23592B00D66701763900C66001FDAB50934700E109FE7A0000000A74524E5300FFFFFFA75FFFDB80503FF934260000011C4944415458C3EDD8411283200C05504010915ABDFF690BCA6857F9BFC44D67CC01DE04854062CC1EC947FB73441FCC15A94368CEC94CD6AEF3F87BCCF36AED741A3DC4E13425288C5D4905891AA32AB126B28EAA584B2A5E97484DC56B5753A2ACC7DA518BD807F95764CB9B1A599C73598B0C8E5330422822B2394E913FECC229E017730ADA279402371BA3E01D4B28C4B6C70A7376A0421D40A470A7182864299015B69E880A5D942485AF6CF950160DF23EEAC2F0522092C122A24122B2C121C0A0106430083408041B18210C883006422803209C2123A4C1DCC5D020106CE0F70961A00B3D2F84F13C411F8445A216A9EDE82D8D64D2B7B4E19EE6BAA4A26CF3C35D038736FAE89A7D5CA30F6342FF10267DCD7242DF38A8111FD8B36168C76386BC0000000049454E44AE426082;
INSERT INTO preview_image_details
(
	image_name,
	image_data
)
VALUES 
(
	'test_image',
	@binary_data
);
select image_name, CONVERT(VARBINARY(MAX),image_data,1) as [image_data] from preview_image_details;
select image_name, image_data as [image_data] from preview_image_details;

